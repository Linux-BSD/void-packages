# Template file for 'pine64-kernel'
pkgname=pine64-kernel
version=5.3.0
revision=1
_commit=c1533c70af80ea1cb25348e4931455e932f26af1 # Anarsoul's Fork
#_commit=eb2138d7bf673dddfd9e5ad6b434623ffd61c751 # Linux-BSD's Fork

short_desc="Linux kernel with support for Pine64 boards"
maintainer="Linux-BSD <sec.research.2005@gmail.com>"
license="GPL-2.0"
homepage="http://www.kernel.org"
distfiles="https://github.com/anarsoul/linux-2.6/archive/${_commit}.tar.gz" # Anarsoul's Fork
#distfiles="https://github.com/Linux-BSD/linux/archive/${_commit}.tar.gz" # Linux-BSD's Fork
checksum=ed702f4aaab303d5df0db7dd2d06a19313f401f635bec02523c1edb47a5e32e6   # Anarsoul's Fork
#checksum=0f46b650ee0195728e951bc99811b6981f46aac5611b6f50f6234d3f9a797193 # Linux-BSD's Fork



nodebug=yes
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes

archs="aarch64*"

hostmakedepends="bc elfutils-devel flex gmp-devel kmod libmpc-devel libressl-devel perl uboot-mkimage"
makedepends="ncurses-devel"
depends="mkinitcpio mkinitcpio-udev"

wrksrc="linux-2.6-${_commit}" # Anarsoul's Fork
#wrksrc="linux-${_commit}" # Linux-BSD's Fork
_kernver="${version}-${revision}-ARCH"
_karch=arm64
#triggers="kernel-hooks"
#kernel_hooks_version="${_kernver}"


# These files could be modified when an external module is built.
mutable_files="
  /usr/lib/modules/${_kernver}/modules.dep
  /usr/lib/modules/${_kernver}/modules.dep.bin
  /usr/lib/modules/${_kernver}/modules.symbols
  /usr/lib/modules/${_kernver}/modules.symbols.bin
  /usr/lib/modules/${_kernver}/modules.alias
  /usr/lib/modules/${_kernver}/modules.alias.bin
  /usr/lib/modules/${_kernver}/modules.devname"

do_configure() {
  if [ "$CROSS_BUILD" ]; then
    _args="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
  fi
  export KBUILD_BUILD_USER=user
  export KBUILD_BUILD_HOST=host

  sed -ri "s|^(EXTRAVERSION =)(.*)|\1-${revision}|" Makefile
  sed -i '2iexit 0' scripts/depmod.sh
  cp ${FILESDIR}/config .config
  make ${makejobs} ${_args} ARCH=${_karch} olddefconfig
}

do_build() {
  if [ "$CROSS_BUILD" ]; then
    _args="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
  fi
  export KBUILD_BUILD_USER=user
  export KBUILD_BUILD_HOST=host
  export LDFLAGS=
  make ${makejobs} ${_args} ARCH=${_karch} prepare
  make ${makejobs} ${_args} ARCH=${_karch} Image Image.gz modules dtbs
}

do_install() {
  if [ "$CROSS_BUILD" ]; then
    _args="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
  fi
  export KBUILD_BUILD_USER=user
  export KBUILD_BUILD_HOST=host

  local hdrdest

  # For mkinitcpio
  vmkdir etc/mkinitcpio.d
  vinstall ${FILESDIR}/linux.preset 644 etc/mkinitcpio.d linux-5.3.preset

  vmkdir lib/modules
  make ${makejobs} ${_args} ARCH=${_karch} INSTALL_MOD_PATH=${DESTDIR} modules_install

  vmkdir boot
  make ${makejobs} ${_args} ARCH=${_karch} INSTALL_DTBS_PATH=${DESTDIR}/boot/dtbs dtbs_install

  vinstall arch/${_karch}/boot/Image 644 boot
  vinstall arch/${_karch}/boot/Image.gz 644 boot

  hdrdest=${DESTDIR}/usr/src/${sourcepkg}-headers-${_kernver}

  # Switch to /usr.
  vmkdir usr
  mv ${DESTDIR}/lib ${DESTDIR}/usr

  cd ${DESTDIR}/usr/lib/modules/${_kernver}
  rm -f source build
  ln -sf ../../../src/${sourcepkg}-headers-${_kernver} build

  cd ${wrksrc}
  install -D -m644 vmlinux "${hdrdest}/vmlinux"
  # Install required headers to build external modules
  install -Dm644 Makefile ${hdrdest}/Makefile
  install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
  install -Dm644 .config ${hdrdest}/.config
  for file in $(find . -name Kconfig\*); do
    mkdir -p ${hdrdest}/$(dirname $file)
    install -Dm644 $file ${hdrdest}/${file}
    if [ -f "$(dirname $file)/Makefile" ]; then
    install -Dm644 $(dirname $file)/Makefile ${hdrdest}/$(dirname $file)/Makefile
    fi
  done
  for file in $(find arch/${subarch:-$arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
    mkdir -p ${hdrdest}/$(dirname $file)
    install -Dm644 $file ${hdrdest}/${file}
  done
  mkdir -p ${hdrdest}/include
  # Remove firmware stuff provided by the "linux-firmware" pkg.
  rm -rf ${DESTDIR}/usr/lib/firmware

  for i in acpi asm-generic clocksource config crypto drm generated linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    [ -d include/$i ] && cp -a include/$i ${hdrdest}/include
  done

  cd ${wrksrc}
  mkdir -p ${hdrdest}/arch/${_karch}
  cp -a arch/${_karch}/include ${hdrdest}/arch/${_karch}
#
  # Remove helper binaries built for host,
  # if generated files from the scripts/ directory need to be included,
  # they need to be copied to ${hdrdest} before this step
  if [ "$CROSS_BUILD" ]; then
    make ${makejobs} ${_args} ARCH=${_karch} _mrproper_scripts
    rm -f scripts/*.o
    rm -f scripts/*/*.o
  fi

  # Copy files necessary for later builds.
  cp Module.symvers ${hdrdest}
  cp -a scripts ${hdrdest}
  #mkdir -p ${hdrdest}/security/selinux
  #cp -a security/selinux/include ${hdrdest}/security/selinux
  mkdir -p ${hdrdest}/tools/include
  cp -a tools/include/tools ${hdrdest}/tools/include

  # fix permissions on scripts dir
  chmod og-w -R ${hdrdest}/scripts

  mkdir -p ${hdrdest}/arch/${_karch}/kernel
  cp arch/${_karch}/Makefile ${hdrdest}/arch/${_karch}
  cp arch/${_karch}/kernel/Makefile ${hdrdest}/arch/${_karch}/kernel
  cp arch/${_karch}/kernel/asm-offsets.s ${hdrdest}/arch/${_karch}/kernel
  cp -a arch/${_karch}/kernel/vdso ${hdrdest}/arch/${_karch}/kernel/

  mkdir -p ${hdrdest}/arch/${_karch}/crypto
  cp arch/${_karch}/crypto/Makefile ${hdrdest}/arch/${_karch}/crypto

  # i2c
  mkdir -p ${hdrdest}/drivers/media/i2c
  cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c

  # Add md headers
  mkdir -p ${hdrdest}/drivers/md
  cp drivers/md/*.h ${hdrdest}/drivers/md

  # Add inotify.h
  mkdir -p ${hdrdest}/include/linux
  cp include/linux/inotify.h ${hdrdest}/include/linux

  # Add wireless headers
  mkdir -p ${hdrdest}/net/mac80211/
  cp net/mac80211/*.h ${hdrdest}/net/mac80211

  # add dvb headers for external modules
  mkdir -p ${hdrdest}/include/config/dvb/
  cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

  # add dvb headers
  mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
  cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
  mkdir -p ${hdrdest}/drivers/media/dvb-frontends/
  cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
  mkdir -p ${hdrdest}/drivers/media/tuners
  cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners

  # Add xfs and shmem for aufs building
  mkdir -p ${hdrdest}/fs/xfs/libxfs
  mkdir -p ${hdrdest}/mm
  cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

  # Remove unneeded architectures
  rm -rf "${hdrdest}"/arch/{alpha,arc,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,x86,xtensa}
  # Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
  mkdir -p ${hdrdest}/arch/x86/ras
  cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

  depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

pine64-kernel-headers_package() {
  preserve=yes
  nostrip=yes
  noshlibprovides=yes
  short_desc="The Linux kernel headers for Pine64 boards"
  pkg_install() {
    vmove usr/src
    vmove usr/lib/modules/${_kernver}/build
  }
}
